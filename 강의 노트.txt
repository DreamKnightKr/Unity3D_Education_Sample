Step2 : 멀치 플랫폼 대응 그리고 단말기 빌드


[Part2 - 플랫폼 간에 별도 동작 특성]
* 빌드에 들어가는 것과 안들어가는 것
  > 일반 종속성 추적/Resources 폴더방식/StreamAsset 폴더 방식
    일단 반삭
      * Scene > defendency 추적
      * Scene에 들어가 있는것은 전체 압축 후 분할로 보임(APK 확인)
      
    : Resource Folder 방식
      * 프리팹/텍스쳐 어떤 것을 넣어도 됨.
      * Scene에 종속적이지 않고, 생성/사용시점이 동적인 것을 넣음.
      * Resource Class를 활용하여 바로 Load 가능함.
      * APK를 빵집으로 열어 보면 각 파일이 할당된 GUI로 이름이 변경되어 패키징 된것을 볼 수있음.(APK 확인)
      * 단, 유니티에서만 사용가능하며 유니티에서 인식하는 타잎으로 파일 확장자가 정해져야함.(xml 확장자 txt로 인식 못함)
      * 그리고, 확장자만 다른 파일이 존재하면 로딩에러.

    : SteamAsset Folder 방식 
      * 빌드 패키지 안에는 들어가지만, 웹뷰/동영상 플래이어등 Native 모듈이 사용할 파일을 넣음.
      * 밸드 패키지 안에 보면 이름 변경 없이 그대로 들어가 있음.
      * iOS/Android 플래폼 마다 file Path(URL) 경로가 다르고  파일 접근 방법이 다름.
      * 보통은 잘 사용하지는 않음 어셋 번들 파일은 있지만, 추가 다운로드 서버가 없을 때 assetbundle 추가 다운로드 파일을 형식을 임시로 패키징해서 배포해야할경우에 사용했었음. xml/json/csv/html 파일을 넣는 다든다.

  > Resources 폴더에 들어가 있는 것은 GUI로 이름 변경우 개별 압축되었는 것으로 보임(네이밍 테이블은 음)


* 플랫폼 별 파일 억세스 > 그리
  :  플랫폼 별로 경로가 다른개별 동작.


[Part3]
* Native와의 통신(iOS/Android)
  : Progress UI plugin을 만들어 보자

* Export/Import
  : Select Dependency > Export > Import


//(완료)-------------------------------------------------------
[Part1]

* Script를 통해 플랫폼 마다 다른 동작하기
  : #if #else #endif
    > 에디터 상에서도 플랫폼 특성 처럼 동작해야하는 것들
    > Build Setting과 연동
  : RuntimePlatformClass를 이용 방법
    > 실재 디바이스에서만 동작해야하는 것들 저장 파일 경로 지정 등.
    > 실재 플래이(실행) 상황과 연동

* Editor UI를 통한 플랫폼에 따라서 다른 동작하기
  : GUID와 Library Folder에 할당된 GUI로 이름이 바뀐 파일이 생김.
  : texture meta file GUI에 해당되는 것이 플랫폼 변경우 크기가 늘었다 줄었다하는 것으로 확인됨.



//[향후 필요한것(프로그래머)]-------------------------------------------------------
* 코드 포맷팅 설정


* Game -> Class 객체간에 통신 방법 
* GameObject <-> GameObjct 간에 통신 방법
  > GetComponent, SendMessage


* Lift Cycle과 StartCoroutine 병렬작업이 들어가는 현업 예시


* 메모리 관리

* profiling